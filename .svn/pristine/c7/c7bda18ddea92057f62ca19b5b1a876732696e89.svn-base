package com.wzlue.app.controller.member;

import java.math.BigDecimal;
import java.util.*;

import cn.hutool.core.util.ReUtil;
import com.alibaba.fastjson.JSONObject;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.wzlue.app.controller.wechat.ApiPayController;
import com.wzlue.common.base.Query;
import com.wzlue.common.utils.NumberUtils;
import com.wzlue.goods.service.GoodsCollectionService;
import com.wzlue.goods.service.GoodsFootprintService;
import com.wzlue.member.entity.IntegralRecordEntity;
import com.wzlue.member.entity.MemberAgreementEntity;
import com.wzlue.member.entity.MemberRecommendEntity;
import com.wzlue.member.service.IntegralRecordService;
import com.wzlue.member.service.MemberAgreementService;
import com.wzlue.member.service.MemberRecommendService;
import com.wzlue.order.entity.OrderEntity;
import com.wzlue.order.service.OrderService;
import com.wzlue.sys.MSdx.ApiDemo4Java;
import com.wzlue.sys.service.SysConfigService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import com.wzlue.app.common.annotation.Login;
import com.wzlue.common.base.R;
import com.wzlue.member.entity.MemberInfoEntity;
import com.wzlue.member.service.MemberInfoService;
import com.wzlue.sys.common.config.IntegralConfig;

@RestController

@RequestMapping("/app/member")
public class ApiMemberInfoController {

	@Autowired
	private MemberInfoService memberInfoService;
	@Autowired
	private IntegralConfig integralConfig;
	@Autowired
	private GoodsCollectionService goodsCollectionService;
	@Autowired
	private GoodsFootprintService goodsFootprintService;
	@Autowired
	private MemberAgreementService memberAgreementService;
	@Autowired
	private SysConfigService sysConfigService;
	@Autowired
	private IntegralRecordService integralRecordService;
	@Autowired
	private MemberRecommendService memberRecommendService;
	@Autowired
	private OrderService orderService;

	@Login
	@RequestMapping("/info")
	public R info(@RequestAttribute("userId") Long userId) {
		MemberInfoEntity memberInfo = memberInfoService.queryObject(userId);
		Map<String, Object> map = new HashMap<>();
		map.put("memberId", userId);
		int saveNum = goodsCollectionService.queryTotal(map);
		int footNum = goodsFootprintService.queryTotal(map);
		R r = new R();
		r.put("saveNum", saveNum);
		r.put("footNum", footNum);
		r.put("memberInfo", memberInfo);
		return r;
	}

	@Login
	@RequestMapping("/updateMobile")
	public R updateMobile(String mobile, @RequestAttribute("userId") Long userId) {
		MemberInfoEntity memberInfo = new MemberInfoEntity();
		memberInfo.setId(userId);
		memberInfo.setMobile(mobile);
		memberInfoService.update(memberInfo);
		return R.ok();
	}


	@Login
	@RequestMapping("/updateRealName")
	public R updateRealName(String realName, @RequestAttribute("userId") Long userId) {
		MemberInfoEntity memberInfo = new MemberInfoEntity();
		memberInfo.setId(userId);
		memberInfo.setRealName(realName);
		memberInfoService.update(memberInfo);
		return R.ok();
	}

	/**
	 * 发送手机验证码
	 *
	 * @param mobile
	 * @return
	 */
	@Login
	@RequestMapping("/sendSMS")
	public R sendSMS(String mobile) {
		String smsCode = null;
		String regex = "^((13[0-9])|(14[5,7,9])|(15([0-3]|[5-9]))|(166)|(17[0,1,3,5,6,7,8])|(18[0-9])|(19[8|9]))\\d{8}$";
		if (!"".equals(mobile) && ReUtil.contains(regex, mobile)) {
			Map<String, Object> map = new HashMap<>();
			map.put("mobile", mobile);
			int total = memberInfoService.queryTotal(map);
			if (total > 0)
				return R.error("手机号码已被绑定！");
			ApiDemo4Java.send(mobile);
			return R.ok();
		}
		return R.error();
	}

	/**
	 * 验证短信码
	 *
	 * @param mobile
	 * @param smsCode
	 * @return
	 */
	@Login
	@RequestMapping("/testSmsCode")
	public R register(String mobile, String smsCode) {
		// 验证短信码
		if (!ApiDemo4Java.yz(mobile, smsCode)) {
			return R.error("短信码错误!");
		}
		//绑定用户
//		MemberInfoEntity memberInfo = memberInfoService.queryObject(userId);
//		memberInfo.setMobile(mobile);
//		memberInfoService.update(memberInfo);
		return R.ok();
	}

	/**
	 * 创建虚拟订单
	 * @param userId
	 * @param integral
	 * @param payment
	 * @return
	 */
	@Login
	@Transactional
	@RequestMapping("/createOrder")
	public R createOrder(@RequestBody OrderEntity order, @RequestAttribute("userId") Long userId) {
		MemberInfoEntity memberInfo = memberInfoService.queryObject(userId);
		if (memberInfo.getIsVip()==1){
			return R.error("已是会员，请勿重复购买");
		} else {
			order.setMemberId(userId);
			order.setCreateTime(new Date());
			order.setStatus(1);
			orderService.create(order);//生成虚拟订单

			double integral = memberInfo.getIntegral();//正常积分
			double freezingIntegral = memberInfo.getFreezingIntegral();//冻结积分
			double all = integral+freezingIntegral;
			double orderUse = order.getUseIntegral();//订单所用积分
			//判断支付类型
			if("integral".equals(order.getPayType())) {//积分
				if (all>=orderUse){
					if (freezingIntegral>=orderUse) {//冻结扣
					double a=freezingIntegral-orderUse;
					int b= (int) a;
						memberInfo.setFreezingIntegral(b);
						//冻结积分购买会员记录

					} else{
						memberInfo.setFreezingIntegral(0);
						//冻结积分购买会员记录

						double diff = orderUse-freezingIntegral;
						//正常积分购买会员记录
                        if(integral>=diff){ //正常积分大于等于需要支付的金额
							double c=integral-diff;
							int d=(int)c;
							memberInfo.setIntegral(d);
						}

					}
				} else {
					return R.error("积分不够");
				}
				memberInfo.setIsVip(1);
				memberInfo.setVipAddTime(new Date());
				Calendar curr = Calendar.getInstance();
				curr.set(Calendar.YEAR, curr.get(Calendar.YEAR) + 1);//会员有效期一年
				memberInfo.setVipEndTime(curr.getTime());
				memberInfoService.update(memberInfo);
				//订单支付成功--完成
				orderService.payNotifyMember(order);
			}else if ("mix".equals(order.getPayType())){//混合
				if(all>=orderUse){
					if (freezingIntegral>=orderUse) {//积分够
						double a=orderUse-freezingIntegral;
						int b= (int) a;
						memberInfo.setFreezingIntegral(b);
						//冻结积分购买会员记录
					} else {
						memberInfo.setFreezingIntegral(0);
						//冻结积分购买会员记录
						double c=orderUse-freezingIntegral;
						int d=(int)c;
//						int diff = orderUse-freezingIntegral;
						//正常积分购买会员记录
						memberInfo.setIntegral(d);
						BigDecimal number = new BigDecimal(0);
						number=BigDecimal.valueOf((int)0);
//						//应付-积分
//						BigDecimal wechatPay = order.getPaymentAmount().subtract(number);
						order.setWechatAmount(number);
						return R.ok().put("orderNumber", order.getOrderNumber()).put("paymentAmount", 0.01);
					}

				}else{

					memberInfo.setFreezingIntegral(0);//冻结积分
					memberInfo.setIntegral(0);//正常积分
					double amountMoney=(integral+freezingIntegral);//需支付金额
					BigDecimal number = new BigDecimal(0);
					number=BigDecimal.valueOf((double)amountMoney);
					//应付-积分
					BigDecimal wechatPay = order.getPaymentAmount().subtract(number);
					order.setWechatAmount(wechatPay);
					return R.ok().put("orderNumber", order.getOrderNumber()).put("paymentAmount", 0.01);
				}

				memberInfo.setIsVip(1);
				memberInfo.setVipAddTime(new Date());
				Calendar curr = Calendar.getInstance();
				curr.set(Calendar.YEAR, curr.get(Calendar.YEAR) + 1);//会员有效期一年
				memberInfo.setVipEndTime(curr.getTime());
				memberInfoService.update(memberInfo);
			}
			return R.ok().put("orderNumber", order.getOrderNumber()).put("paymentAmount", order.getPaymentAmount());
		}
	}

	@Login
	@RequestMapping("/getIntegral")
	public R getIntegral(@RequestAttribute("userId") Long userId) {
		MemberInfoEntity memberInfo = memberInfoService.queryObject(userId);
		return R.ok().put("integral", memberInfo.getIntegral());
	}

	@Login
	@RequestMapping("/signIn")
	public R signIn(@RequestAttribute("userId") Long userId) {
		memberInfoService.signIn(userId);
		return R.ok();
	}

	@Login
	@RequestMapping("/isSignIn")
	public R isSignIn(@RequestAttribute("userId") Long userId) {
		boolean isSignIn = memberInfoService.isSignIn(userId);
		return R.ok().put("isSignIn", isSignIn);
	}

	@Login
	@RequestMapping("/getAvailableIntegral")
	public R getAvailableIntegral(@RequestAttribute("userId") Long userId, BigDecimal paymentAmount) {
		Integer integral = memberInfoService.queryIntegral(userId);
		if (integral > 0) {

			int lose = integralConfig.config3().getDeduction().getLose(); //失去
			int get = integralConfig.config3().getDeduction().getGet(); //获得
			int upLimit = integralConfig.config3().getDeduction().getUpperLimit(); //上限

			int purposeMoney = integral / lose * get;

			if (purposeMoney > paymentAmount.intValue() * upLimit / 100) {
				purposeMoney = paymentAmount.intValue() * upLimit / 100;
				integral = purposeMoney / lose * get;
			}

			return R.ok().put("purposeMoney", purposeMoney).put("integral", integral);

		}
		return R.ok().put("purposeMoney", 0).put("integral", 0);
	}

	//会员下级列表（会员推荐列表）
	@Login
	@RequestMapping("/getRecommender")
	public R getRecommender(@RequestAttribute("userId") Long userId) {
		Map<String, Object> params = new HashMap<>();
		params.put("recommenderId", userId);
		List<MemberInfoEntity> memberInfoList = memberInfoService.queryList(params);
		return R.ok().put("memberInfoList", memberInfoList);
	}

	//会员协议接口
	@Login
	@RequestMapping("/getAgreement")
	public R getAgreement(@RequestParam Map<String, Object> params) {
		//查询列表数据
		Query query = new Query(params);
		params.put("status", 1);
		List<MemberAgreementEntity> memberAgreementList = memberAgreementService.queryList(query);
		return R.ok().put("memberAgreement", memberAgreementList);
	}

}
