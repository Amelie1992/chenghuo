package com.wzlue.app.controller.wechat;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.github.binarywang.wxpay.bean.notify.WxPayNotifyResponse;
import com.github.binarywang.wxpay.bean.notify.WxPayOrderNotifyResult;
import com.github.binarywang.wxpay.bean.request.WxPayUnifiedOrderRequest;
import com.github.binarywang.wxpay.bean.result.WxPayUnifiedOrderResult;
import com.github.binarywang.wxpay.exception.WxPayException;
import com.github.binarywang.wxpay.service.WxPayService;
import com.github.binarywang.wxpay.util.SignUtils;
import com.wzlue.app.common.annotation.Login;
import com.wzlue.common.base.R;
import com.wzlue.common.utils.IPUtils;
import com.wzlue.member.entity.MemberInfoEntity;
import com.wzlue.member.service.MemberInfoService;
import com.wzlue.order.entity.OrderEntity;
import com.wzlue.order.service.OrderService;

@RestController
@RequestMapping("/app/wechat/pay")
public class ApiPayController {
	
	@Autowired
	private MemberInfoService memberInfoService;
	
	@Autowired
	private WxPayService wxPayService;
	
	@Autowired
	private OrderService orderService;
	

	/**
     * 统一下单(详见https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_1)
     * 在发起微信支付前，需要调用统一下单接口，获取"预支付交易会话标识"
     * 接口地址：https://api.mch.weixin.qq.com/pay/unifiedorder
     *
     * @param request 请求对象，注意一些参数如appid、mchid等不用设置，方法内会自动从配置对象中获取到（前提是对应配置中已经设置）
     */
    @Login
    @PostMapping("unifiedOrder")
    public R unifiedOrder(@RequestAttribute("userId") Long userId, @RequestBody OrderEntity order, HttpServletRequest req) throws WxPayException {
    	MemberInfoEntity userInfo = memberInfoService.queryObject(userId);
    	WxPayUnifiedOrderRequest request = new WxPayUnifiedOrderRequest();
    	request.setOutTradeNo(order.getOrderNumber());
    	request.setOpenid(userInfo.getOpenid());
    	request.setBody("荣狮商城");
    	request.setNotifyURL(wxPayService.getConfig().getNotifyUrl());
    	request.setTotalFee(order.getPaymentAmount().multiply(new BigDecimal(100)).intValue());
    	request.setSpbillCreateIp(IPUtils.getIpAddr(req));
    	request.setTradeType("JSAPI");
    	WxPayUnifiedOrderResult result = wxPayService.unifiedOrder(request);
    	
    	String timeStamp = String.valueOf(System.currentTimeMillis() / 1000);
        String nonceStr = String.valueOf(System.currentTimeMillis());
    			
    	//signKey 商户平台设置的密钥key
    	//签名字段：appId，timeStamp，nonceStr，package，signType
    			
    	Map<String, String> params = new HashMap<String, String>();
    	params.put("appId", wxPayService.getConfig().getAppId());
    	params.put("timeStamp", timeStamp);
    	params.put("nonceStr", nonceStr);
    	params.put("package", "prepay_id=" + result.getPrepayId());
    	params.put("signType", "MD5");
    	
    	String sign = SignUtils.createSign(params, wxPayService.getConfig().getMchKey(), "MD5");
    	
    	params.put("paySign", sign);
    	
    	return R.ok().put("data", params);
    }
    
    /**
     * 此方法需要改造，根据实际需要返回com.github.binarywang.wxpay.bean.notify.WxPayNotifyResponse对象
     */
    @PostMapping("/parseOrderNotifyResult")
    public String parseOrderNotifyResult(@RequestBody String xmlData) throws Exception {
    	WxPayOrderNotifyResult wxPayOrderNotifyResult = wxPayService.parseOrderNotifyResult(xmlData);
    	
    	if("SUCCESS".equals(wxPayOrderNotifyResult.getReturnCode())){
    		OrderEntity order = new OrderEntity();
    		order.setOrderNumber(wxPayOrderNotifyResult.getOutTradeNo());
    		order.setStatus(2);
    		orderService.payNotify(order);
    		return WxPayNotifyResponse.success("OK");
    	}else {
    		return WxPayNotifyResponse.success("OK");
    	}
    }
}
